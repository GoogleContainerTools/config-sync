# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# special prow related things

# This is the image that our prow nomos-presubmit-e2e job runs so that it can
# use KIND instead of setting up a GKE cluster per test run.

# Note: nothing builds this, if you update the version, you will need to rebuild manually.
# For the version tag, concatenate the kubekins version and KIND version
E2E_TEST_IMAGE_OSS_PROW_KUBEKINS_REGISTRY := k8s-staging-test-infra
E2E_TEST_IMAGE_OSS_PROW_KUBEKINS := v20220708-6b0cfd300e-1.23
E2E_TEST_IMAGE_OSS_PROW_KIND := v0.14.0
E2E_TEST_IMAGE_OSS_PROW_TAG := kubekins-e2e-$(E2E_TEST_IMAGE_OSS_PROW_KUBEKINS)-kind-$(E2E_TEST_IMAGE_OSS_PROW_KIND)
E2E_TEST_IMAGE_OSS_PROW := gcr.io/oss-prow-build-kpt-config-sync/e2e-prow:$(E2E_TEST_IMAGE_OSS_PROW_TAG)
image-oss-prow: build/prow/kubekins-kind/Dockerfile
	@echo "+++ Building the image for the oss-prow presubmit run"
	docker buildx build \
		-t $(E2E_TEST_IMAGE_OSS_PROW) \
		--build-arg KUBEKINS_REGISTRY=$(E2E_TEST_IMAGE_OSS_PROW_KUBEKINS_REGISTRY) \
		--build-arg KUBEKINS=$(E2E_TEST_IMAGE_OSS_PROW_KUBEKINS) \
		--build-arg KIND_RELEASE=$(E2E_TEST_IMAGE_OSS_PROW_KIND) \
		-f $< \
		$(dir $<).
	@docker push $(E2E_TEST_IMAGE_OSS_PROW)


###################################
# Helpers
###################################

.PHONY: install-crane
# install crane binary to publish the image
install-crane:
	go install github.com/google/go-containerregistry/cmd/crane@latest

.PHONY: install-helm
# install helm binary to publish the image
install-helm:
	wget https://get.helm.sh/helm-$(HELM_VERSION)-linux-amd64.tar.gz -O /tmp/helm-$(HELM_VERSION)-linux-amd64.tar.gz
	tar -zxvf /tmp/helm-$(HELM_VERSION)-linux-amd64.tar.gz -C /tmp
	mkdir -p $(HELM) || true
	mv /tmp/linux-amd64/helm $(HELM)
	rm /tmp/helm-$(HELM_VERSION)-linux-amd64.tar.gz

###################################
# Prow environment provisioning
###################################
# The following targets are used to provision test resources in a prow environment

.PHONY: push-test-oci-images
# push-test-oci-images pushes the test images to the Artifact Registry and Container Registry repositories.
push-test-oci-images: install-crane
	GCP_PROJECT=$(GCP_PROJECT) ./scripts/publish-test-oci-images.sh

.PHONY: push-to-test-csr-repos
push-to-test-csr-repos:
	GCP_PROJECT=$(GCP_PROJECT) ./scripts/push-to-test-csr-repos.sh

.PHONY: set-up-kcc-configs
KCC_MANAGED_PROJECT ?= cs-dev-hub
set-up-kcc-configs:
	GCP_PROJECT=$(GCP_PROJECT) KCC_MANAGED_PROJECT=$(KCC_MANAGED_PROJECT) \
	GCP_CLUSTER=$(GCP_CLUSTER) GCP_ZONE=$(GCP_ZONE) \
	./scripts/set-up-kcc-configs.sh

.PHONY: set-up-workload-identity-test
FLEET_HOST_PROJECT ?= cs-dev-hub
PROW_PROJECT ?= oss-prow-build-kpt-config-sync
set-up-workload-identity-test:
	GCP_PROJECT=$(GCP_PROJECT) FLEET_HOST_PROJECT=$(FLEET_HOST_PROJECT) \
	PROW_PROJECT=$(PROW_PROJECT) \
	./scripts/set-up-workload-identity-configs.sh

.PHONY: push-test-helm-charts-to-ar
push-test-helm-charts-to-ar: install-helm
	GCP_PROJECT=$(GCP_PROJECT) ./scripts/push-test-helm-charts-to-ar.sh