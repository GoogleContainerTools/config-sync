// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	context "context"

	configmanagementv1 "github.com/GoogleContainerTools/config-sync/pkg/api/configmanagement/v1"
	scheme "github.com/GoogleContainerTools/config-sync/pkg/generated/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// SyncsGetter has a method to return a SyncInterface.
// A group's client should implement this interface.
type SyncsGetter interface {
	Syncs() SyncInterface
}

// SyncInterface has methods to work with Sync resources.
type SyncInterface interface {
	Create(ctx context.Context, sync *configmanagementv1.Sync, opts metav1.CreateOptions) (*configmanagementv1.Sync, error)
	Update(ctx context.Context, sync *configmanagementv1.Sync, opts metav1.UpdateOptions) (*configmanagementv1.Sync, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, sync *configmanagementv1.Sync, opts metav1.UpdateOptions) (*configmanagementv1.Sync, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*configmanagementv1.Sync, error)
	List(ctx context.Context, opts metav1.ListOptions) (*configmanagementv1.SyncList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *configmanagementv1.Sync, err error)
	SyncExpansion
}

// syncs implements SyncInterface
type syncs struct {
	*gentype.ClientWithList[*configmanagementv1.Sync, *configmanagementv1.SyncList]
}

// newSyncs returns a Syncs
func newSyncs(c *ConfigmanagementV1Client) *syncs {
	return &syncs{
		gentype.NewClientWithList[*configmanagementv1.Sync, *configmanagementv1.SyncList](
			"syncs",
			c.RESTClient(),
			scheme.ParameterCodec,
			"",
			func() *configmanagementv1.Sync { return &configmanagementv1.Sync{} },
			func() *configmanagementv1.SyncList { return &configmanagementv1.SyncList{} },
		),
	}
}
