# e2e related build rules

E2E_PARAMS := \
	IMAGE_TAG=$(IMAGE_TAG) \
	GCP_PROJECT=$(GCP_PROJECT) \
	REGISTRY=$(REGISTRY) \

# The directory for e2e test related files
E2E_DIR := $(OUTPUT_DIR)/nomos

E2E_VERSION := v1.0.2
E2E_TEST_IMAGE := gcr.io/$(GCP_PROJECT)/e2e-tests:$(E2E_VERSION)

# Builds the e2e docker image and dependencies.
image-e2e-tests: \
		build/e2e-tests/Dockerfile \
		build/e2e-tests/build.sh
	@echo "+++ Building the e2e docker image"
	@gcloud $(GCLOUD_QUIET) auth configure-docker
	@build/e2e-tests/build.sh \
		-t $(E2E_TEST_IMAGE) \
		$(DOCKER_BUILD_QUIET)
	$(MAKE) build-cli VERSION=$(VERSION)


GOTOPT2_BINARY := docker run -i -u $(UID):$(GID) $(BUILDENV_IMAGE) /bin/gotopt2

push-e2e-tests: image-e2e-tests
	docker push $(E2E_TEST_IMAGE)

# Makes sure that E2E_TEST_IMAGE is available in the local docker cache.
# The image takes a *long* time to rebuild, so we reuse a prebuilt one instead.
ensure-image-e2e-tests:
	@if ! docker image inspect $(E2E_TEST_IMAGE) > /dev/null; then \
		docker image pull $(E2E_TEST_IMAGE); \
	fi

# Runs nomos vet locally for example repos.
# Requires kubeconfig set up properly with Nomos cluster.
# This is now a duplicate of cli.bats from the e2e tests framework,
# but can run locally without any of the setup.
test-nomos-vet-local: build
	@echo "Running test-nomos-vet-local..."
	$(NOMOS_LOCAL) --validate vet --path=./examples/acme
	$(NOMOS_LOCAL) vet --path=./examples/foo-corp-example/foo-corp

	@rm -rf ./.output/tmp/empty
	@mkdir ./.output/tmp/empty
	@cd ./.output/tmp/empty && git init && git checkout -b main && $(NOMOS_LOCAL) init && $(NOMOS_LOCAL) vet

include Makefile.e2e.ci

# Builds a new nomos image and pushes it to the local Docker repository.
# For use with the Go e2e tests. See e2e/doc.go.
__push-local-image: build-images
	@bash scripts/docker-registry.sh
	$(MAKE) retag-images \
		OLD_REGISTRY=$(REGISTRY) \
		OLD_IMAGE_TAG=$(IMAGE_TAG) \
		REGISTRY=localhost:5000 \
		IMAGE_TAG=$(IMAGE_TAG)
	$(MAKE) push-images \
		REGISTRY=localhost:5000 \
		IMAGE_TAG=$(IMAGE_TAG)

__install-nomos-local:
	@GO111MODULE=on go install ./cmd/nomos/nomos.go

# Runs the Go e2e tests
# Rebuilds the nomos image, so use this when you're actively modifying the Nomos
# code between test runs.
test-e2e-go: __push-local-image __install-nomos-local test-e2e-go-nobuild

# Runs the Go e2e tests without building a new Nomos image.
# This doesn't rebuild the Nomos image, so you can modify test code and rerun
# this without having to rebuild the image.
test-e2e-go-nobuild:
	@./scripts/e2e-go.sh --timeout 60m --image-tag=$(IMAGE_TAG)

# Go test target for Prow.
# Separate from the above as we are still tuning how Prow runs tests.
__test-e2e-go-nobuild-prow:
	@./scripts/e2e-go.sh --timeout 60m --parallel 12 --image-tag=$(IMAGE_TAG)

# The target to be run by Prow for e2e tests.
# Delete all kind clusters before tests to prevent leaking resources after
# failed tests where cleanup is unsuccessful. This only deletes clusters in the
# current Kind network, so other Prow jobs running in the same
# Cluster/NodePool/etc. are unaffected.
test-e2e-kind: __push-local-image
	@docker build . -f build/test-e2e-go/kind/Dockerfile -t prow-image
	# The .sock volume allows you to connect to the Docker daemon of the host.
	# Part of the docker-in-docker pattern.
	@docker run -v /var/run/docker.sock:/var/run/docker.sock --network="host" prow-image make __test-e2e-go-nobuild-prow

# This target runs all the e2e tests with the mono-repo mode.
test-e2e-kind-mono-repo: __push-local-image
	kind delete clusters --all
	GCP_PROJECT=$(GCP_PROJECT) ./scripts/e2e-kind.sh --timeout 60m --parallel 15 --image-tag=$(IMAGE_TAG) $(E2E_ARGS)

# This target runs the first group of e2e tests with the mono-repo mode.
test-e2e-kind-mono-repo-test-group1:
	$(MAKE) E2E_ARGS="$(E2E_ARGS) --test-features=acm-controller,cluster-selector,drift-control,lifecycle,nomos-cli" test-e2e-kind-mono-repo

# This target runs the second group of e2e tests with the mono-repo mode.
test-e2e-kind-mono-repo-test-group2:
	$(MAKE) E2E_ARGS="$(E2E_ARGS) --test-features=sync-source,reconciliation-1" test-e2e-kind-mono-repo

# This target runs the third group of e2e tests with the mono-repo mode.
test-e2e-kind-mono-repo-test-group3:
	$(MAKE) E2E_ARGS="$(E2E_ARGS) --test-features=reconciliation-2" test-e2e-kind-mono-repo

# This target runs all the e2e tests with the multi-repo mode.
test-e2e-kind-multi-repo: __push-local-image
	kind delete clusters --all
	GCP_PROJECT=$(GCP_PROJECT) ./scripts/e2e-kind.sh --multirepo --timeout 60m --parallel 15 --image-tag=$(IMAGE_TAG) $(E2E_ARGS)

# This target runs the first group of e2e tests with the multi-repo mode.
test-e2e-kind-multi-repo-test-group1:
	$(MAKE) E2E_ARGS="$(E2E_ARGS) --test-features=acm-controller,cluster-selector,drift-control,lifecycle,nomos-cli" test-e2e-kind-multi-repo

# This target runs the second group of e2e tests with the multi-repo mode.
test-e2e-kind-multi-repo-test-group2:
	$(MAKE) E2E_ARGS="$(E2E_ARGS) --test-features=sync-source,reconciliation-1" test-e2e-kind-multi-repo

# This target runs the third group of e2e tests with the multi-repo mode.
test-e2e-kind-multi-repo-test-group3:
	$(MAKE) E2E_ARGS="$(E2E_ARGS) --test-features=reconciliation-2,multi-repos,override-api,hydration" test-e2e-kind-multi-repo

# Runs the Go e2e tests against multi-repo Config Sync.
# Rebuilds the nomos image, so use this when you're actively modifying the Nomos
# code between test runs.
test-e2e-go-multirepo: __push-local-image __install-nomos-local
	@GO111MODULE=on go test ./e2e/... --e2e --timeout 60m --multirepo --image-tag=$(IMAGE_TAG)
