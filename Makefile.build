# Included by Makefile.
# Rules related to building nomos and docker images.

HELM := $(BIN_DIR)/helm

###################################
# Build environment
###################################

# Pulls the cached builenv docker image from gcrio.
pull-buildenv:
	@docker image inspect $(BUILDENV_IMAGE) &> /dev/null \
	|| docker pull $(BUILDENV_IMAGE)

build-buildenv: build/buildenv/Dockerfile
	@echo "+++ Creating the docker container for $(BUILDENV_IMAGE)"
	@docker build $(DOCKER_BUILD_QUIET) build/buildenv -t $(BUILDENV_IMAGE)

push-buildenv: build-buildenv
	@gcloud $(GCLOUD_QUIET) auth configure-docker
	@docker push $(BUILDENV_IMAGE)

###################################
# Docker images
###################################

.PHONY: build
build: $(OUTPUT_DIR) pull-buildenv
	@echo "+++ Build setup done"

# NOTE: this rule depends on OUTPUT_DIR because buildenv needs those dirs to
# exist in order to work.
PLATFORMS := linux_amd64 linux_arm64 darwin_amd64 darwin_arm64 windows_amd64
build-cli: pull-buildenv buildenv-dirs
	@echo "+++ Compiling Nomos binaries for $(PLATFORMS)"
	@echo "+++ Compiling with VERSION: $(VERSION)"
	@mkdir -p $(addprefix $(OUTPUT_DIR)/go/bin/,$(PLATFORMS))
	@docker run $(DOCKER_RUN_ARGS) ./scripts/build.sh \
		--version $(VERSION) \
		$(PLATFORMS)

# Build Config Sync docker images
.PHONY: build-images
build-images: build-images-monorepo build-images-multirepo

# Build Config Sync docker images for monorepo mode
.PHONY: build-images-monorepo
build-images-monorepo: license
	@gcloud $(GCLOUD_QUIET) auth configure-docker
	@echo "+++ Building the nomos image: $(NOMOS_TAG)"
	@docker build $(DOCKER_BUILD_QUIET) \
		--target $(NOMOS_IMAGE) \
		-t $(NOMOS_TAG) \
		-f build/all/Dockerfile \
		--build-arg VERSION=${VERSION} \
		.

# Build Config Sync docker images for multirepo mode
.PHONY: build-images-multirepo
build-images-multirepo: license
	@echo "+++ Building the Reconciler image: $(RECONCILER_TAG)"
	@docker build $(DOCKER_BUILD_QUIET) \
		--target $(RECONCILER_IMAGE) \
		-t $(RECONCILER_TAG) \
		-f build/all/Dockerfile \
		--build-arg VERSION=${VERSION} \
		.
	@echo "+++ Building the Reconciler Manager image: $(RECONCILER_MANAGER_TAG)"
	@docker build $(DOCKER_BUILD_QUIET) \
		--target $(RECONCILER_MANAGER_IMAGE) \
		-t $(RECONCILER_MANAGER_TAG) \
		-f build/all/Dockerfile \
		--build-arg VERSION=${VERSION} \
		.
	@echo "+++ Building the Admission Webhook image: $(ADMISSION_WEBHOOK_TAG)"
	@docker build $(DOCKER_BUILD_QUIET) \
		--target $(ADMISSION_WEBHOOK_IMAGE) \
		-t $(ADMISSION_WEBHOOK_TAG) \
		-f build/all/Dockerfile \
		--build-arg VERSION=${VERSION} \
		.
	@echo "+++ Building the Hydration Controller image: $(HYDRATION_CONTROLLER_TAG)"
	@docker build $(DOCKER_BUILD_QUIET) \
		--target $(HYDRATION_CONTROLLER_IMAGE) \
		-t $(HYDRATION_CONTROLLER_TAG) \
		-f build/all/Dockerfile \
		--build-arg VERSION=${VERSION} \
		.
	@echo "+++ Building the Hydration Controller image with shell: $(HYDRATION_CONTROLLER_WITH_SHELL_TAG)"
	@docker build $(DOCKER_BUILD_QUIET) \
		--target $(HYDRATION_CONTROLLER_WITH_SHELL_IMAGE) \
		-t $(HYDRATION_CONTROLLER_WITH_SHELL_TAG) \
		-f build/all/Dockerfile \
		--build-arg VERSION=${VERSION} \
		.
	@echo "+++ Building the OCI-sync image: $(OCI_SYNC_TAG)"
	@docker build $(DOCKER_BUILD_QUIET) \
		--target $(OCI_SYNC_IMAGE) \
		-t $(OCI_SYNC_TAG) \
		-f build/all/Dockerfile \
		--build-arg VERSION=${VERSION} \
		.
	@echo "+++ Building the Helm-sync image: $(HELM_SYNC_TAG)"
	@docker build $(DOCKER_BUILD_QUIET) \
		--target $(HELM_SYNC_IMAGE) \
		-t $(HELM_SYNC_TAG) \
		-f build/all/Dockerfile \
		--build-arg VERSION=${VERSION} \
		.

# Deprecated alias of build-images. Remove this once unused.
.PHONY: image-nomos
image-nomos: build-images

# Pushes Config Sync docker images to REGISTRY.
.PHONY: push-images
push-images: push-images-monorepo push-images-multirepo

.PHONY: push-images-monorepo
push-images-monorepo:
	@echo "+++ Pushing Config Sync images to $(REGISTRY)"
	@echo "+++ Using account:"
	gcloud config get-value account
	@gcloud $(GCLOUD_QUIET) auth configure-docker
	docker push $(NOMOS_TAG)

.PHONY: push-images-multirepo
push-images-multirepo:
	@echo "+++ Pushing Config Sync images to $(REGISTRY)"
	@echo "+++ Using account:"
	gcloud config get-value account
	@gcloud $(GCLOUD_QUIET) auth configure-docker
	docker push $(RECONCILER_TAG)
	docker push $(RECONCILER_MANAGER_TAG)
	docker push $(ADMISSION_WEBHOOK_TAG)
	docker push $(HYDRATION_CONTROLLER_TAG)
	docker push $(HYDRATION_CONTROLLER_WITH_SHELL_TAG)
	docker push $(OCI_SYNC_TAG)
	docker push $(HELM_SYNC_TAG)

# Deprecated alias of push-images. Remove this once unused.
.PHONY: push-to-gcr-nomos
push-to-gcr-nomos: push-images

# Pulls all Config Sync images from REGISTRY
.PHONY: pull-images
pull-images: pull-images-monorepo pull-images-multirepo

# Pulls monorepo Config Sync images from REGISTRY
.PHONY: pull-images-monorepo
pull-images-monorepo:
	@echo "+++ Pulling Config Sync images from $(REGISTRY)"
	docker pull $(NOMOS_TAG)

# Pulls multirepo Config Sync images from REGISTRY
.PHONY: pull-images-multirepo
pull-images-multirepo:
	@echo "+++ Pulling Config Sync images from $(REGISTRY)"
	docker pull $(NOMOS_TAG)
	docker pull $(RECONCILER_TAG)
	docker pull $(RECONCILER_MANAGER_TAG)
	docker pull $(ADMISSION_WEBHOOK_TAG)
	docker pull $(HYDRATION_CONTROLLER_TAG)
	docker pull $(HYDRATION_CONTROLLER_WITH_SHELL_TAG)
	docker pull $(OCI_SYNC_TAG)
	docker pull $(HELM_SYNC_TAG)

# Deprecated alias of pull-images. Remove this once unused.
pull-config-sync-images: pull-images

# Retags previously built Config Sync images
.PHONY: retag-images
retag-images: retag-images-monorepo retag-images-multirepo

# Retags previously built Config Sync images for monorepo mode
.PHONY: retag-images-monorepo
retag-images-monorepo:
	@echo "+++ Retagging Config Sync images from $(OLD_REGISTRY)/*:$(OLD_IMAGE_TAG) to $(REGISTRY)/*:$(IMAGE_TAG)"
	docker tag $(OLD_REGISTRY)/$(NOMOS_IMAGE):$(OLD_IMAGE_TAG) $(NOMOS_TAG)

# Retags previously built Config Sync images for multirepo mode
.PHONY: retag-images-multirepo
retag-images-multirepo:
	@echo "+++ Retagging Config Sync images from $(OLD_REGISTRY)/*:$(OLD_IMAGE_TAG) to $(REGISTRY)/*:$(IMAGE_TAG)"
	docker tag $(OLD_REGISTRY)/$(RECONCILER_IMAGE):$(OLD_IMAGE_TAG) $(RECONCILER_TAG)
	docker tag $(OLD_REGISTRY)/$(RECONCILER_MANAGER_IMAGE):$(OLD_IMAGE_TAG) $(RECONCILER_MANAGER_TAG)
	docker tag $(OLD_REGISTRY)/$(ADMISSION_WEBHOOK_IMAGE):$(OLD_IMAGE_TAG) $(ADMISSION_WEBHOOK_TAG)
	docker tag $(OLD_REGISTRY)/$(HYDRATION_CONTROLLER_IMAGE):$(OLD_IMAGE_TAG) $(HYDRATION_CONTROLLER_TAG)
	docker tag $(OLD_REGISTRY)/$(HYDRATION_CONTROLLER_WITH_SHELL_IMAGE):$(OLD_IMAGE_TAG) $(HYDRATION_CONTROLLER_WITH_SHELL_TAG)
	docker tag $(OLD_REGISTRY)/$(OCI_SYNC_IMAGE):$(OLD_IMAGE_TAG) $(OCI_SYNC_TAG)
	docker tag $(OLD_REGISTRY)/$(HELM_SYNC_IMAGE):$(OLD_IMAGE_TAG) $(HELM_SYNC_TAG)

# Pushes the specified component's docker image to gcr.io.
.PHONY: retag-rc-images
retag-rc-images:
	@echo "+++ Promoting Config Sync images to $(REGISTRY)"
	@test -n "$(RC_TAG)" || (echo "RC_TAG unset" ; exit 1)
	$(MAKE) pull-config-sync-images \
		REGISTRY=$(OLD_REGISTRY) \
		IMAGE_TAG=$(RC_TAG)
	$(MAKE) retag-images \
		OLD_REGISTRY=$(OLD_REGISTRY) \
		OLD_IMAGE_TAG=$(RC_TAG) \
		REGISTRY=$(REGISTRY) \
		IMAGE_TAG=$(IMAGE_TAG)

###################################
# Deployment generation
###################################

.PHONY: clean-deployments-dir
__clean-deployments-dir:
	rm -rf $(GEN_DEPLOYMENT_DIR)
	$(MAKE) $(OUTPUT_DIR)

.PHONY: generate-deployments
generate-deployments: \
		__clean-deployments-dir \
		$(GEN_DEPLOYMENT_DIR)/git-importer.yaml \
		$(GEN_DEPLOYMENT_DIR)/monitor.yaml \
		$(GEN_DEPLOYMENT_DIR)/reconciler-manager-configmap.yaml \
		$(GEN_DEPLOYMENT_DIR)/reconciler-manager.yaml \
		$(GEN_DEPLOYMENT_DIR)/otel-collector.yaml \
		$(GEN_DEPLOYMENT_DIR)/admission-webhook.yaml
	@echo "+++ Finished generating all yaml"

# Generates the podspec yaml for the component specified.
.PHONY: $(GEN_DEPLOYMENT_DIR)/git-importer.yaml
$(GEN_DEPLOYMENT_DIR)/git-importer.yaml: manifests/templates/git-importer.yaml
	@echo "+++ Generating yaml $@"
	@mkdir -p $(dir $@)
	@sed -e 's|IMAGE_NAME|$(NOMOS_TAG)|' < $< > $@

.PHONY: $(GEN_DEPLOYMENT_DIR)/monitor.yaml
$(GEN_DEPLOYMENT_DIR)/monitor.yaml: manifests/templates/monitor.yaml
	@echo "+++ Generating yaml $@"
	@mkdir -p $(dir $@)
	@sed -e 's|IMAGE_NAME|$(NOMOS_TAG)|' < $< > $@

.PHONY: $(GEN_DEPLOYMENT_DIR)/reconciler-manager-configmap.yaml
$(GEN_DEPLOYMENT_DIR)/reconciler-manager-configmap.yaml: \
		manifests/templates/reconciler-manager-configmap.yaml
	@echo "+++ Generating yaml $@"
	@mkdir -p $(dir $@)
	@sed -e 's|RECONCILER_IMAGE_NAME|$(RECONCILER_TAG)|' \
		-e 's|OCI_SYNC_IMAGE_NAME|$(OCI_SYNC_TAG)|' \
		-e 's|HELM_SYNC_IMAGE_NAME|$(HELM_SYNC_TAG)|' \
		-e 's|HYDRATION_CONTROLLER_IMAGE_NAME|$(HYDRATION_CONTROLLER_TAG)|' < $< > $@

.PHONY: $(GEN_DEPLOYMENT_DIR)/reconciler-manager.yaml
$(GEN_DEPLOYMENT_DIR)/reconciler-manager.yaml: \
		manifests/templates/reconciler-manager.yaml
	@echo "+++ Generating yaml $@"
	@mkdir -p $(dir $@)
	@sed -e 's|RECONCILER_MANAGER_IMAGE_NAME|$(RECONCILER_MANAGER_TAG)|' < $< > $@

.PHONY: $(GEN_DEPLOYMENT_DIR)/otel-collector.yaml
$(GEN_DEPLOYMENT_DIR)/otel-collector.yaml: \
		manifests/templates/otel-collector.yaml
	@echo "+++ Generating yaml $@"
	@mkdir -p $(dir $@)
	@sed -e 's|IMAGE_NAME|$(OTEL_COLLECTOR_TAG)|' < $< > $@

.PHONY: $(GEN_DEPLOYMENT_DIR)/admission-webhook.yaml
$(GEN_DEPLOYMENT_DIR)/admission-webhook.yaml: \
		manifests/templates/admission-webhook.yaml
	@echo "+++ Generating yaml $@"
	@mkdir -p $(dir $@)
	@sed -e 's|WEBHOOK_IMAGE_NAME|$(ADMISSION_WEBHOOK_TAG)|' < $< > $@

###################################
# Config Sync manifest
###################################

# Build Config Sync manifests for ACM operator and OSS.
.PHONY: build-manifests
build-manifests: __config-sync-manifest
	@echo "+++ Copying manifests for OSS deployments"
	rm -rf $(OUTPUT_DIR)/oss/cloned
	mkdir -p $(OUTPUT_DIR)/oss/cloned
	rsync \
		--exclude='admission-webhook.yaml' \
		--exclude='git-importer.yaml' \
		--exclude='monitor.yaml' \
		.output/deployment/* .output/oss/cloned/deployment/
	rsync \
		--exclude='acm-psp.yaml' \
		--exclude='policy-controller-psp.yaml' \
		--exclude='cluster-config-crd.yaml' \
		--exclude='hierarchyconfig-crd.yaml' \
		--exclude='importer-service-account.yaml' \
		--exclude='monitor-service-account.yaml' \
		--exclude='namespace-config-crd.yaml' \
		--exclude='nomos-repo-crd.yaml' \
		--exclude='sync-declaration-crd.yaml' \
		.output/manifests/* .output/oss/cloned/manifests/
	rsync \
		manifests/test-resources/* .output/oss/cloned/manifests/
	@echo "++++ Add OSS yaml files to config-sync-manifest.yaml"
	env GO111MODULE=on go run -mod=vendor ./scripts/append_manifests/append_manifests.go \
		--destination=${OSS_MANIFEST_STAGING_DIR}/config-sync-manifest.yaml \
		$(OUTPUT_DIR)/oss/cloned/manifests \
		$(OUTPUT_DIR)/oss/cloned/deployment
	@echo "+++ Add separate acm-psp.yaml manifest so it can be applied independently"
	rsync \
		.output/manifests/acm-psp.yaml ${OSS_MANIFEST_STAGING_DIR}/acm-psp.yaml

# Build Config Sync manifests for OSS installations
.PHONY: build-manifests-oss
build-manifests-oss: "$(GOBIN)/addlicense" "$(GOBIN)/kustomize" $(OUTPUT_DIR)
	@ echo "+++ Generating manifests in $(OSS_MANIFEST_STAGING_DIR)"
	@ echo "    Using these tags:"
	@ echo "    $(RECONCILER_MANAGER_IMAGE): $(RECONCILER_MANAGER_TAG)"
	@ echo "    $(HYDRATION_CONTROLLER_IMAGE): $(HYDRATION_CONTROLLER_TAG)"
	@ echo "    $(HYDRATION_CONTROLLER_WITH_SHELL_IMAGE): $(HYDRATION_CONTROLLER_WITH_SHELL_TAG)"
	@ echo "    $(RECONCILER_IMAGE): $(RECONCILER_TAG)"
	@ echo "    $(ADMISSION_WEBHOOK_IMAGE): $(ADMISSION_WEBHOOK_TAG)"
	@ echo "    $(OCI_SYNC_IMAGE): $(OCI_SYNC_TAG)"
	@ echo "    $(HELM_SYNC_IMAGE): $(HELM_SYNC_TAG)"
	@ rm -f $(OSS_MANIFEST_STAGING_DIR)/*
	@ "$(GOBIN)/kustomize" build --load-restrictor=LoadRestrictionsNone manifests/oss \
		| sed \
			-e "s|RECONCILER_IMAGE_NAME|$(RECONCILER_TAG)|g" \
			-e "s|OCI_SYNC_IMAGE_NAME|$(OCI_SYNC_TAG)|g" \
			-e "s|HELM_SYNC_IMAGE_NAME|$(HELM_SYNC_TAG)|g" \
			-e "s|HYDRATION_CONTROLLER_IMAGE_NAME|$(HYDRATION_CONTROLLER_TAG)|g" \
			-e "s|RECONCILER_MANAGER_IMAGE_NAME|$(RECONCILER_MANAGER_TAG)|g" \
		> $(OSS_MANIFEST_STAGING_DIR)/config-sync-manifest.yaml
	@ "$(GOBIN)/addlicense" $(OSS_MANIFEST_STAGING_DIR)/config-sync-manifest.yaml

	@ # Additional optional OSS manifests
	@ rsync \
		.output/manifests/acm-psp.yaml $(OSS_MANIFEST_STAGING_DIR)/acm-psp.yaml
	@ cat "manifests/templates/admission-webhook.yaml" \
		| sed -e "s|WEBHOOK_IMAGE_NAME|$(ADMISSION_WEBHOOK_TAG)|g" \
		> $(OSS_MANIFEST_STAGING_DIR)/admission-webhook.yaml

	@ echo "+++ Manifests generated in $(OSS_MANIFEST_STAGING_DIR)"

# Build Config Sync manifests for ACM operator
.PHONY: build-manifests-operator
build-manifests-operator: "$(GOBIN)/addlicense" "$(GOBIN)/kustomize" $(OUTPUT_DIR)
	@ echo "+++ Generating manifests in $(NOMOS_MANIFEST_STAGING_DIR)"
	@ echo "    Using these tags:"
	@ echo "    $(RECONCILER_MANAGER_IMAGE): $(RECONCILER_MANAGER_TAG)"
	@ echo "    $(HYDRATION_CONTROLLER_IMAGE): $(HYDRATION_CONTROLLER_TAG)"
	@ echo "    $(HYDRATION_CONTROLLER_WITH_SHELL_IMAGE): $(HYDRATION_CONTROLLER_WITH_SHELL_TAG)"
	@ echo "    $(RECONCILER_IMAGE): $(RECONCILER_TAG)"
	@ echo "    $(ADMISSION_WEBHOOK_IMAGE): $(ADMISSION_WEBHOOK_TAG)"
	@ echo "    $(OCI_SYNC_IMAGE): $(OCI_SYNC_TAG)"
	@ echo "    $(HELM_SYNC_IMAGE): $(HELM_SYNC_TAG)"
	@ rm -f $(NOMOS_MANIFEST_STAGING_DIR)/*
	@ "$(GOBIN)/kustomize" build --load-restrictor=LoadRestrictionsNone manifests/operator \
		| sed \
			-e "s|RECONCILER_IMAGE_NAME|$(RECONCILER_TAG)|g" \
			-e "s|OCI_SYNC_IMAGE_NAME|$(OCI_SYNC_TAG)|g" \
			-e "s|HELM_SYNC_IMAGE_NAME|$(HELM_SYNC_TAG)|g" \
			-e "s|HYDRATION_CONTROLLER_IMAGE_NAME|$(HYDRATION_CONTROLLER_TAG)|g" \
			-e "s|RECONCILER_MANAGER_IMAGE_NAME|$(RECONCILER_MANAGER_TAG)|g" \
			-e "s|WEBHOOK_IMAGE_NAME|$(ADMISSION_WEBHOOK_TAG)|g" \
		> $(NOMOS_MANIFEST_STAGING_DIR)/config-sync-manifest.yaml
	@ "$(GOBIN)/addlicense" $(NOMOS_MANIFEST_STAGING_DIR)/config-sync-manifest.yaml

	@ echo "+++ Manifests generated in $(NOMOS_MANIFEST_STAGING_DIR)"

# Deprecated alias of build-manifests. Remove this once unused.
.PHONY: __config-sync-manifest-oss
__config-sync-manifest-oss: build-manifests

# __config-sync-manifest creates the config-sync-manifest.yaml for release and incorporation into ACM Operator
.PHONY: __config-sync-manifest
__config-sync-manifest: generate-deployments
	@echo "+++ Preparing config-sync-manifest.yaml"
	@echo "++++ Copy manifests (except templates/ and test-resources/) to output folder"
	rm -rf $(OUTPUT_DIR)/manifests
	rsync manifests/* .output/manifests/
	@echo "++++ Add yaml files to config-sync-manifest.yaml"
	env GO111MODULE=on go run -mod=vendor ./scripts/append_manifests/append_manifests.go \
		--destination=${NOMOS_MANIFEST_STAGING_DIR}/config-sync-manifest.yaml \
		$(OUTPUT_DIR)/manifests \
		$(OUTPUT_DIR)/deployment

# config-sync-manifest-no-push creates the config-sync-manifest.yaml and builds images without pushing
.PHONY: config-sync-manifest-no-push
config-sync-manifest-no-push: $(OUTPUT_DIR) build-images build-manifests

# config-sync-manifest-promote creates the config-sync-manifest.yaml for promoted artifacts
# and retags images without publishing
.PHONY: config-sync-manifest-promote-no-push
config-sync-manifest-promote-no-push: $(OUTPUT_DIR) retag-rc-images build-manifests

# config-sync-manifest-e2e adds additional resources that are necessary for the e2e tests
.PHONY: config-sync-manifest-e2e
config-sync-manifest-e2e: config-sync-manifest
	@echo "+++ Preparing config-sync-manifest-e2e.yaml"
	sed -e "s|GIT_REPO_URL|git@test-git-server.config-management-system-test:/git-server/repos/config-management-system/root-sync|g" \
		e2e/raw-nomos/manifests/mono-repo-configmaps.yaml > mono-repo-configmaps.copy.yaml
	env GO111MODULE=on go run -mod=vendor ./scripts/append_manifests/append_manifests.go \
		--destination=${NOMOS_MANIFEST_STAGING_DIR}/config-sync-manifest-e2e.yaml \
		manifests/test-resources/00-namespace.yaml \
		${NOMOS_MANIFEST_STAGING_DIR}/config-sync-manifest.yaml \
		mono-repo-configmaps.copy.yaml
	rm mono-repo-configmaps.copy.yaml

# config-sync-manifest creates config sync manifest and pushes its docker images
.PHONY: config-sync-manifest
config-sync-manifest: config-sync-manifest-no-push push-images

# config-sync-manifest-promote creates the config-sync-manifest.yaml for promoted artifacts
# and pushes the promoted images
.PHONY: config-sync-manifest-promote
config-sync-manifest-promote: config-sync-manifest-promote-no-push push-images

###################################
# E2E Git Server
###################################

# NOTE: when updating the git-server version, update
# test/manifests/templates/git-server.yaml to reflect the version change
GIT_SERVER_DOCKER := $(OUTPUT_DIR)/git-server-docker
GIT_SERVER_RELEASE := v1.0.0
# Creates docker image for the test git-server from github source
build-git-server:
	@echo "+++ Building image for test git server"
	@mkdir -p $(OUTPUT_DIR)
	@rm -rf $(GIT_SERVER_DOCKER)
	@git clone https://github.com/jkarlosb/git-server-docker.git $(GIT_SERVER_DOCKER)
	@cd $(GIT_SERVER_DOCKER) && git checkout $(GIT_SERVER_RELEASE)
	@docker build $(DOCKER_BUILD_QUIET) \
			$(GIT_SERVER_DOCKER) \
			-t gcr.io/stolos-dev/git-server:$(GIT_SERVER_RELEASE)
	@gcloud $(GCLOUD_QUIET) auth configure-docker
	@docker push gcr.io/stolos-dev/git-server:$(GIT_SERVER_RELEASE)

# NOTE: when updating the git-server version, update
# e2e/nomostest/git-server.go to reflect the version change
E2E_TEST_IMAGE_HTTP_GIT_SERVER_TAG := v1.0.0
E2E_TEST_IMAGE_HTTP_GIT_SERVER := gcr.io/stolos-dev/http-git-server:$(E2E_TEST_IMAGE_HTTP_GIT_SERVER_TAG)
# Builds the container used by e2e tests to test git over HTTPS.
build-http-git-server:
	@echo "+++ Building the http-git-server image"
	docker build \
		-t $(E2E_TEST_IMAGE_HTTP_GIT_SERVER) \
		test/docker/http-git-server/
	@docker push $(E2E_TEST_IMAGE_HTTP_GIT_SERVER)

.PHONY: install-crane
# install crane binary to publish the image
install-crane:
	go install github.com/google/go-containerregistry/cmd/crane@latest

.PHONY: push-test-oci-images
# push-test-oci-images pushes the test images to the Artifact Registry and Container Registry repositories.
push-test-oci-images: install-crane
	GCP_PROJECT=$(GCP_PROJECT) ./scripts/publish-test-oci-images.sh

.PHONY: push-to-test-csr-repos
push-to-test-csr-repos:
	GCP_PROJECT=$(GCP_PROJECT) ./scripts/push-to-test-csr-repos.sh

.PHONY: set-up-kcc-configs
KCC_MANAGED_PROJECT ?= cs-dev-hub
set-up-kcc-configs:
	GCP_PROJECT=$(GCP_PROJECT) KCC_MANAGED_PROJECT=$(KCC_MANAGED_PROJECT) \
	GCP_CLUSTER=$(GCP_CLUSTER) GCP_ZONE=$(GCP_ZONE) \
	./scripts/set-up-kcc-configs.sh

.PHONY: set-up-workload-identity-test
FLEET_HOST_PROJECT ?= cs-dev-hub
set-up-workload-identity-test:
	GCP_PROJECT=$(GCP_PROJECT) FLEET_HOST_PROJECT=$(FLEET_HOST_PROJECT) \
	./scripts/set-up-workload-identity-configs.sh

.PHONY: install-helm
# install helm binary to publish the image
install-helm:
	wget https://get.helm.sh/helm-$(HELM_VERSION)-linux-amd64.tar.gz -O /tmp/helm-$(HELM_VERSION)-linux-amd64.tar.gz
	tar -zxvf /tmp/helm-$(HELM_VERSION)-linux-amd64.tar.gz -C /tmp
	mkdir -p $(HELM) || true
	mv /tmp/linux-amd64/helm $(HELM)
	rm /tmp/helm-$(HELM_VERSION)-linux-amd64.tar.gz

.PHONY: push-test-helm-charts-to-ar
push-test-helm-charts-to-ar: install-helm
	GCP_PROJECT=$(GCP_PROJECT) ./scripts/push-test-helm-charts-to-ar.sh
